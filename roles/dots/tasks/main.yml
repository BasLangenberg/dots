---
# tasks file for dots
- name: Install essential packages
  apt:
    pkg: "{{ essential_packages }}"
    update_cache: yes
    cache_valid_time: 3600
  become: true
- name: Add Kubernetes repo key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
  become: true
- name: Add Kubernetes repository
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
  become: true
- name: Add Hashicorp repo key
  apt_key:
    url: https://apt.releases.hashicorp.com/gpg
    state: present
  become: true
- name: Add Hashicorp repository
  apt_repository:
    repo: deb [arch=amd64] https://apt.releases.hashicorp.com focal main
    state: present
  become: true
- name: Install additional packages
  apt:
    pkg: "{{ additional_packages }}"
    update_cache: yes
    cache_valid_time: 3600
  become: true
- name: Install gopls
  ansible.builtin.shell: source /etc/profile.d/golang.sh && go install golang.org/x/tools/gopls@latest
  args:
    executable: /bin/bash
- name: Install pip packages
  pip:
    name: "{{ pip_packages }}"
- name: Create docker group
  group:
    name: "docker"
  become: true
- name: Create user
  user:
    name: "{{ user }}"
    shell: /bin/zsh
    groups: ["docker"]
    append: yes
  become: true
- name: check if dotfiles are in place
  stat:
    path: "/home/{{ user }}/dots"
  register: dots
- name: clone dotfiles
  git:
    repo: https://github.com/BasLangenberg/dots.git
    dest: "/home/{{ user }}/dots"
  when: dots.stat.isdir is not defined
  become: true
- name: update permissions
  file:
    path: "/home/{{ user }}/dots"
    owner: "{{ user }}"
    group: "{{ user }}"
    recurse: true
  when: dots.stat.isdir is not defined
- name: setup ranger folder
  file:
    path: "/home/{{ user }}/.config/ranger"
    owner: "{{ user }}"
    group: "{{ user }}"
    state: directory
    mode: 0755
- name: link ranger config
  file:
    src: "/home/{{ user }}/dots/roles/dots/files/ranger_rc.conf"
    path: "/home/{{ user }}/.config/ranger/rc.conf"
    state: link
    owner: "{{ user }}"
    group: "{{ user }}"
- name: link .config directories
  file:
    src: "/home/{{ user }}/dots/roles/dots/files/{{ item }}"
    path: "/home/{{ user }}/.config/{{ item }}"
    state: link
    owner: "{{ user }}"
    group: "{{ user }}"
  with_items:
    - wal
    - polybar
    - nvim
- name: clone powerlevel10k
  git:
    repo: https://github.com/romkatv/powerlevel10k.git
    dest: "/home/{{ user }}/powerlevel10k"
- name: p10k - fix permissions
  file:
    path: "/home/{{ user }}/powerlevel10k"
    owner: "{{ user }}"
    group: "{{ user }}"
    recurse: true
- name: link dotfiles
  file:
    src: "/home/{{ user }}/dots/roles/dots/files/{{ item }}"
    path: "/home/{{ user }}/{{ item }}"
    state: link
    owner: "{{ user }}"
    group: "{{ user }}"
  with_items:
    - .zshrc
    - .tmux.conf
    - .vim
    - .gitconfig
    - .p10k.zsh
- name: Create bin directory
  ansible.builtin.file:
    path: "/home/{{ user }}/bin"
    state: directory
    mode: '0755'
- name: link scripts
  file:
    src: "/home/{{ user }}/dots/roles/dots/files/scripts"
    path: "/home/{{ user }}/bin/scripts"
    state: link
    owner: "{{ user }}"
    group: "{{ user }}"
- name: check if fzf is in place
  stat:
    path: "/home/{{ user }}/.fzf"
  register: fzf
- name: Clone fzf
  git:
    repo: https://github.com/junegunn/fzf.git
    dest: "/home/{{ user }}/.fzf"
  when: fzf.stat.isdir is not defined
- name: fzf - fix permissions
  file:
    path: "/home/{{ user }}/.fzf"
    owner: "{{ user }}"
    group: "{{ user }}"
    recurse: true
- name: Install fzf
  command:
    cmd: "/home/{{ user }}/.fzf/install --all"
    creates: "/home/{{ user }}/.fzf/bin/fzf"
- name: Get latest release of doctl
  community.general.github_release:
    user: digitalocean
    repo: doctl
    action: latest_release
  register: doctl_version
- name: Download and install doctl
  ansible.builtin.unarchive:
    src: "https://github.com/digitalocean/doctl/releases/download/{{ doctl_version.tag }}/doctl-{{ doctl_version.tag[1:] }}-linux-amd64.tar.gz"
    dest: /usr/local/bin
    remote_src: yes
  become: true
- name: Get latest release of tflint
  community.general.github_release:
    user: terraform-linters
    repo: tflint
    action: latest_release
  register: tflint_version
- name: Download and install tflint
  ansible.builtin.unarchive:
    src: "https://github.com/terraform-linters/tflint/releases/download/{{ tflint_version.tag }}/tflint_linux_amd64.zip"
    dest: /usr/local/bin
    remote_src: yes
  become: true
- name: Download and install Kustomize
  ansible.builtin.unarchive:
    src: https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.7/kustomize_v4.5.7_linux_amd64.tar.gz
    dest: /usr/local/bin
    remote_src: yes
  become: true
- name: Get latest release of k9s
  community.general.github_release:
    user: derailed
    repo: k9s
    action: latest_release
  register: k9s_ver
- name: Download and install K9s
  ansible.builtin.unarchive:
    src: https://github.com/derailed/k9s/releases/download/{{ k9s_ver.tag }}/k9s_Linux_x86_64.tar.gz
    dest: /usr/local/bin
    remote_src: yes
  become: true
- name: Build neovim
  import_tasks: neovim.yml
