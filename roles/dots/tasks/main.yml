---
# tasks file for dots
# After initial run on 24.04, bash complains about locals making ansible not run properly.
# This should fix it
- name: generate correct locales
  command:
    cmd: locale-gen en_US.UTF-8
  become: true
- name: Remove ruby2.7 if present
  apt:
    pkg:
      - ruby2.7
      - ruby2.7-dev
    state: absent
  become: true
- name: Update all packages to their latest version
  ansible.builtin.apt:
    name: "*"
    state: latest
  become: true
- name: Install essential packages
  apt:
    pkg: "{{ essential_packages }}"
    update_cache: yes
    cache_valid_time: 3600
  become: true
  tags: install-essentials
# Allow pip to setup system packages on my Ubuntu workstations
# I don't like this fix
# TODO make Ansible use personal virtualenv?
# But then all my tooling must too?
# And how do I setup this virtualenv before doing running this?
- name: Get Python 3.X version
  ansible.builtin.command: python3 --version
  register: pyver
  changed_when: false
  failed_when: pyver.rc != 0
- name: Remove Python 3.X EXTERNALLY-MANAGED file
  ansible.builtin.file:
    state: absent
    path: "/usr/lib/python{{ pyver.stdout.split()[1] | regex_search('([0-9]+\\.[0-9]+)') }}/EXTERNALLY-MANAGED"
  when: pyver.stdout | regex_search('3\.[0-9]+')
  become: true
- name: Install pip packages
  pip:
    name: "{{ pip_packages }}"
- name: Add Kubernetes repo key
  apt_key:
    url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
    state: present
  become: true
  tags: k8s
# TODO Retrieve + Install latest version
- name: Add Kubernetes repository
  apt_repository:
    repo: deb https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
    state: present
  become: true
- name: Add Hashicorp repo key
  apt_key:
    url: https://apt.releases.hashicorp.com/gpg
    state: present
  become: true
  tags: k8s
- name: Add Hashicorp repository
  apt_repository:
    repo: deb [arch=amd64] https://apt.releases.hashicorp.com focal main
    state: present
  become: true
- name: Add Microsoft repo key
  apt_key:
    url: https://packages.microsoft.com/keys/microsoft.asc
    state: present
  become: true
  tags: msrepo
- name: Add Microsoft repository
  apt_repository:
    repo: deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ noble main
    state: present
  become: true
  tags: msrepo
- name: Install additional packages
  apt:
    pkg: "{{ additional_packages }}"
    update_cache: yes
    cache_valid_time: 3600
  become: true
  tags: msrepo
- name: check if tmux plugin manager is present
  stat:
    path: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"
  register: tpm
  tags: tpm
- name: clone catppuccin plugin for tmux
  git:
    repo: https://github.com/catppuccin/tmux
    dest: "{{ ansible_env.HOME }}/.config/tmux/plugins/catppuccin/tmux"
  tags: tmux
- name: Setup GoLang
  ansible.builtin.include_role:
    name: gantsign.golang
  vars:
    ansible_become: yes
- name: Setup nodejs
  when: ansible_facts["distribution"] != "Kali"
  ansible.builtin.include_role:
    name: geerlingguy.nodejs
  vars:
    ansible_become: yes
    nodejs_npm_global_packages:
      - name: neovim
    nodejs_version: "18.x"
    nodejs_install_npm_user: "{{ user }}"
- name: Setup ruby
  ansible.builtin.include_role:
    name: geerlingguy.ruby
  vars:
    ansible_become: yes
    ruby_download_url: http://cache.ruby-lang.org/pub/ruby/3.3/ruby-3.3.0.tar.gz
    ruby_version: 3.3.0
    ruby_install_from_source: true
- name: Setup tfenv
  ansible.builtin.include_role:
    name: giner.tfenv
  vars:
    ansible_become: yes
- name: Install gopls
  ansible.builtin.shell: source /etc/profile.d/golang.sh && go install golang.org/x/tools/gopls@latest
  args:
    executable: /bin/bash
- name: Install goimports
  ansible.builtin.shell: source /etc/profile.d/golang.sh && go install golang.org/x/tools/cmd/goimports@latest
  args:
    executable: /bin/bash
- name: Install gocyclo
  ansible.builtin.shell: source /etc/profile.d/golang.sh && go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
  args:
    executable: /bin/bash
- name: Install hclfmt
  ansible.builtin.shell: source /etc/profile.d/golang.sh && go install github.com/fatih/hclfmt@master
  args:
    executable: /bin/bash
- name: Get latest release of golanglint-ci
  community.general.github_release:
    user: golangci
    repo: golangci-lint
    action: latest_release
  register: golangci_version
- name: Download and install golanglint-ci
  ansible.builtin.unarchive:
    src: "https://github.com/golangci/golangci-lint/releases/download/{{ golangci_version.tag }}/golangci-lint-{{ golangci_version.tag[1:] }}-linux-amd64.tar.gz"
    dest: /tmp
    include: golangci-lint-{{ golangci_version.tag[1:] }}-linux-amd64/golangci-lint
    remote_src: yes
- name: Copy golangci to /usr/local/bin
  ansible.builtin.copy:
    src: /tmp/golangci-lint-{{ golangci_version.tag[1:] }}-linux-amd64/golangci-lint
    dest: /usr/local/bin
    mode: 0755
    remote_src: yes
  become: true
- name: Install npm packages
  when: ansible_facts["distribution"] != "Kali"
  community.general.npm:
    name: "{{ item }}"
    global: true
  become: true
  loop: "{{ npm_packages }}"
  tags: npm_packages
- name: Install neovim ruby gem
  command: "gem install neovim"
  become: true
- name: Install solargraph ruby gem
  command: "gem install solargraph"
  become: true
- name: Install kitchen-digitalocean ruby gem
  command: "gem install kitchen-digitalocean"
  become: true
- name: Create docker group
  group:
    name: "docker"
  become: true
- name: Create user
  user:
    name: "{{ user }}"
    shell: /bin/zsh
    groups: ["docker"]
    append: yes
  become: true
- name: check if dotfiles are in place
  stat:
    path: "{{ ansible_env.HOME }}/dots"
  register: dots
- name: clone dotfiles
  git:
    repo: https://github.com/BasLangenberg/dots.git
    dest: "{{ ansible_env.HOME }}/dots"
  when: dots.stat.isdir is not defined
  become: true
- name: update permissions
  file:
    path: "{{ ansible_env.HOME }}/dots"
    owner: "{{ user }}"
    group: "{{ user }}"
    recurse: true
  when: dots.stat.isdir is not defined
- name: setup ranger folder
  file:
    path: "{{ ansible_env.HOME }}/.config/ranger"
    owner: "{{ user }}"
    group: "{{ user }}"
    state: directory
    mode: 0755
- name: link ranger config
  file:
    src: "{{ ansible_env.HOME }}/dots/roles/dots/files/ranger_rc.conf"
    path: "{{ ansible_env.HOME }}/.config/ranger/rc.conf"
    state: link
    owner: "{{ user }}"
    group: "{{ user }}"
- name: link .config directories
  file:
    src: "{{ ansible_env.HOME }}/dots/roles/dots/files/{{ item }}"
    path: "{{ ansible_env.HOME }}/.config/{{ item }}"
    state: link
    owner: "{{ user }}"
    group: "{{ user }}"
  with_items:
    - wal
    - polybar
    - nvim
- name: clone powerlevel10k
  git:
    repo: https://github.com/romkatv/powerlevel10k.git
    dest: "{{ ansible_env.HOME }}/powerlevel10k"
- name: p10k - fix permissions
  file:
    path: "{{ ansible_env.HOME }}/powerlevel10k"
    owner: "{{ user }}"
    group: "{{ user }}"
    recurse: true
- name: link dotfiles
  file:
    src: "{{ ansible_env.HOME }}/dots/roles/dots/files/{{ item }}"
    path: "{{ ansible_env.HOME }}/{{ item }}"
    state: link
    owner: "{{ user }}"
    group: "{{ user }}"
    force: true
  with_items:
    - .zshrc
    - .tmux.conf
    - .vim
    - .gitconfig
    - .gitconfig-work
    - .p10k.zsh
- name: Create bin directory
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/bin"
    state: directory
    mode: '0755'
- name: link scripts
  file:
    src: "{{ ansible_env.HOME }}/dots/roles/dots/files/scripts"
    path: "{{ ansible_env.HOME }}/bin/scripts"
    state: link
    owner: "{{ user }}"
    group: "{{ user }}"
- name: check if fzf is in place
  stat:
    path: "{{ ansible_env.HOME }}/.fzf"
  register: fzf
- name: Clone fzf
  git:
    repo: https://github.com/junegunn/fzf.git
    dest: "{{ ansible_env.HOME }}/.fzf"
  when: fzf.stat.isdir is not defined
- name: fzf - fix permissions
  file:
    path: "{{ ansible_env.HOME }}/.fzf"
    owner: "{{ user }}"
    group: "{{ user }}"
    recurse: true
- name: Install fzf
  command:
    cmd: "{{ ansible_env.HOME }}/.fzf/install --all"
    creates: "{{ ansible_env.HOME }}/.fzf/bin/fzf"
- name: Get latest release of doctl
  community.general.github_release:
    user: digitalocean
    repo: doctl
    action: latest_release
  register: doctl_version
- name: Download and install doctl
  ansible.builtin.unarchive:
    src: "https://github.com/digitalocean/doctl/releases/download/{{ doctl_version.tag }}/doctl-{{ doctl_version.tag[1:] }}-linux-amd64.tar.gz"
    dest: /usr/local/bin
    remote_src: yes
  become: true
- name: Get latest release of kubectx / kubens
  community.general.github_release:
    user: ahmetb
    repo: kubectx
    action: latest_release
  register: kubectx_version
- name: Download and install doctl
  ansible.builtin.unarchive:
    src: "https://github.com/ahmetb/kubectx/releases/download/{{ kubectx_version.tag }}/kubectx_v{{ kubectx_version.tag[1:] }}_linux_x86_64.tar.gz"
    dest: /usr/local/bin
    remote_src: yes
  become: true
- name: Get latest release of terragrunt
  community.general.github_release:
    user: gruntwork-io
    repo: terragrunt
    action: latest_release
  register: terragrunt_version
- name: Download and install doctl
  get_url:
    url: "https://github.com/gruntwork-io/terragrunt/releases/download/{{ terragrunt_version.tag }}/terragrunt_linux_amd64"
    dest: /usr/local/bin/terragrunt
    mode: '0755'
    force: 'yes'
  become: true
- name: Get latest release of tflint
  community.general.github_release:
    user: terraform-linters
    repo: tflint
    action: latest_release
  register: tflint_version
- name: Download and install tflint
  ansible.builtin.unarchive:
    src: "https://github.com/terraform-linters/tflint/releases/download/{{ tflint_version.tag }}/tflint_linux_amd64.zip"
    dest: /usr/local/bin
    remote_src: yes
  become: true
- name: Download and install Kustomize
  ansible.builtin.unarchive:
    src: https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.7/kustomize_v4.5.7_linux_amd64.tar.gz
    dest: /usr/local/bin
    remote_src: yes
  become: true
- name: Get latest release of k9s
  community.general.github_release:
    user: derailed
    repo: k9s
    action: latest_release
  register: k9s_ver
  tags: k9s
- name: Download and install K9s
  ansible.builtin.unarchive:
    src: https://github.com/derailed/k9s/releases/download/{{ k9s_ver.tag }}/k9s_Linux_amd64.tar.gz
    dest: /usr/local/bin
    remote_src: yes
  become: true
  tags: k9s
- name: Ensure k9s config directory exist
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.config/k9s/skins"
    state: directory
  tags: k9s
- name: Download and unzip k9s catppucin theme
  ansible.builtin.unarchive:
    src: https://github.com/catppuccin/k9s/archive/main.tar.gz
    dest: "{{ ansible_env.HOME }}/.config/k9s/skins"
    remote_src: yes
    extra_opts:
      - "--strip-components=2"
      - "k9s-main/dist"
  tags: k9s
- name: Link k9s config
  ansible.builtin.file:
    src: "{{ ansible_env.HOME }}/dots/roles/dots/files/k9s-config.yaml"
    dest: "{{ ansible_env.HOME }}/.config/k9s/config.yaml"
    state: "link"
  tags: k9s
- name: Get latest release of helm
  community.general.github_release:
    user: helm
    repo: helm
    action: latest_release
  register: helm_ver
- name: Download and unzip helm
  ansible.builtin.unarchive:
    src: https://get.helm.sh/helm-{{ helm_ver.tag }}-linux-amd64.tar.gz
    dest: /tmp
    remote_src: yes
- name: Install helm
  ansible.builtin.copy:
    src: /tmp/linux-amd64/helm
    dest: /usr/local/bin
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  become: true
- name: Get latest release of lazygit
  community.general.github_release:
    user: jesseduffield
    repo: lazygit
    action: latest_release
  register: lazygit_ver
  tags: lazygit
- name: Download and unzip lazygit
  ansible.builtin.unarchive:
    src: https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_{{ lazygit_ver.tag | replace('v','') }}_Linux_x86_64.tar.gz
    dest: /tmp
    remote_src: yes
  tags: lazygit
- name: Install lazygit
  ansible.builtin.copy:
    src: /tmp/lazygit
    dest: /usr/local/bin
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  become: true
  tags: lazygit
- name: Download and install win32yank
  ansible.builtin.unarchive:
    src: https://github.com/equalsraf/win32yank/releases/download/v0.0.4/win32yank-x64.zip
    dest: /usr/local/bin
    remote_src: yes
    mode: '0755'
  become: true
- name: Build neovim
  import_tasks: neovim.yml
- name: check if cargo is installed
  shell: command -v cargo
  register: cargo_exists
  ignore_errors: true
  tags:
    - rust
- name: Download Installer
  when: cargo_exists is failed
  get_url:
    url: https://sh.rustup.rs
    dest: /tmp/sh.rustup.rs
    mode: '0755'
    force: 'yes'
  tags:
    - rust
- name: install rust/cargo
  when: cargo_exists is failed
  shell: /tmp/sh.rustup.rs -y
  tags:
    - rust
- name: update rust if possible
  shell: ~/.cargo/bin/rustup update
  tags:
    - rust
    - jnv
- name: install rust-analyzer lsp
  shell: ~/.cargo/bin/rustup component add rust-analyzer
  tags:
    - rust
- name: check if jnv is installed
  shell: command -v jnv
  register: jnv_exists
  ignore_errors: true
  tags:
    - jnv
- name: install jnv
  shell: ~/.cargo/bin/cargo install jnv
  when: jnv_exists is failed
  tags:
    - jnv
- name: Setup Docker
  when: ansible_facts["distribution"] != "Kali"
  ansible.builtin.include_role:
    name: geerlingguy.docker
  vars:
    ansible_become: true
    docker_service_manage: false
    docker_users:
      - "{{ user }}"
    docker_install_compose: true
- name: Download CINC deb file
  ansible.builtin.get_url:
    url: https://downloads.cinc.sh/files/stable/cinc-workstation/24.8.1068/ubuntu/24.04/cinc-workstation_24.8.1068-1_amd64.deb
    dest: /tmp/cinc-workstation_24.8.1068-1_amd64.deb
    mode: '0440'
- name: Install CINC .deb
  ansible.builtin.apt:
    deb: /tmp/cinc-workstation_24.8.1068-1_amd64.deb
  become: true
- name: Get latest release of kubelogin
  community.general.github_release:
    user: Azure
    repo: kubelogin
    action: latest_release
  register: kubelogin_version
- name: Prep kubelogin unzip
  ansible.builtin.file:
    path: /tmp/kubelogin
    state: directory
    mode: '0755'
- name: Download kubelogin
  ansible.builtin.unarchive:
    src: "https://github.com/Azure/kubelogin/releases/download/{{ kubelogin_version.tag }}/kubelogin-linux-amd64.zip"
    dest: /tmp/kubelogin
    remote_src: yes
- name: Copy golangci to /usr/local/bin
  ansible.builtin.copy:
    src: /tmp/kubelogin/bin/linux_amd64/kubelogin
    dest: /usr/local/bin
    mode: 0755
    remote_src: yes
  become: true
- name: Get latest release of zoxide
  community.general.github_release:
    user: ajeetdsouza
    repo: zoxide
    action: latest_release
  tags: zoxide
  register: zoxide_version
- name: Prep zoxide unzip
  ansible.builtin.file:
    path: /tmp/zoxide
    state: directory
    mode: '0755'
  tags: zoxide
- name: Download zoxide
  ansible.builtin.unarchive:
    src: "https://github.com/ajeetdsouza/zoxide/releases/download/{{ zoxide_version.tag }}/zoxide-{{ zoxide_version.tag[1:] }}-x86_64-unknown-linux-musl.tar.gz"
    dest: /tmp/zoxide
    remote_src: yes
  tags: zoxide
- name: Copy zoxide to /usr/local/bin
  ansible.builtin.copy:
    src: /tmp/zoxide/zoxide
    dest: /usr/local/bin
    mode: 0755
    remote_src: yes
  become: true
  tags: zoxide
